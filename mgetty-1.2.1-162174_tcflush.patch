diff --git a/logfile.c b/logfile.c
index 5a275cb..eb91975 100644
--- a/logfile.c
+++ b/logfile.c
@@ -22,6 +22,7 @@
 #endif
 
 #ifdef SYSLOG
+#include <signal.h>
 #include <syslog.h>
 
 #if !defined(linux) && !defined(BSD) && !defined(_SCO_DS) && \
@@ -205,6 +206,7 @@ va_list pvar;
 int     errnr;
 char * p;
 static int first_open = TRUE;
+sigset_t ss, oss;
 
     if ( level > log_level )	/* log level high enough? */
     {
@@ -308,7 +310,24 @@ static int first_open = TRUE;
 		             tm->tm_mon+1,  tm->tm_mday,
 			     tm->tm_hour, tm->tm_min, tm->tm_sec, ws );
 #ifdef SYSLOG
+        /* block all handled signals before syslog(), else an lprintf in
+         * a signal handler could deadlock
+	 */
+	sigemptyset(&ss);
+	sigaddset(&ss, SIGALRM);
+	sigaddset(&ss, SIGCHLD);
+	sigaddset(&ss, SIGHUP);
+	sigaddset(&ss, SIGINT);
+	sigaddset(&ss, SIGPIPE);
+	sigaddset(&ss, SIGQUIT);
+	sigaddset(&ss, SIGTERM);
+	sigaddset(&ss, SIGUSR1);
+	sigaddset(&ss, SIGUSR2);
+	sigprocmask(SIG_BLOCK, &ss, &oss);
+
 	syslog( LOG_NOTICE, "%s", ws );
+
+	sigprocmask(SIG_SETMASK, &oss, 0L);
 #endif
     }
     else if ( level != L_ERROR && level != L_FATAL )
@@ -326,7 +345,21 @@ static int first_open = TRUE;
 		             log_infix, ws,
 			     strerror(errnr) );
 #ifdef SYSLOG
+       sigemptyset(&ss);
+       sigaddset(&ss, SIGALRM);
+       sigaddset(&ss, SIGCHLD);
+       sigaddset(&ss, SIGHUP);
+       sigaddset(&ss, SIGINT);
+       sigaddset(&ss, SIGPIPE);
+       sigaddset(&ss, SIGQUIT);
+       sigaddset(&ss, SIGTERM);
+       sigaddset(&ss, SIGUSR1);
+       sigaddset(&ss, SIGUSR2);
+       sigprocmask(SIG_BLOCK, &ss, &oss);
+
 	syslog( level == L_FATAL? LOG_ALERT: LOG_ERR, "%s: %m", ws );
+	
++       sigprocmask(SIG_SETMASK, &oss, 0L);
 #endif
 
 #ifndef SYSLOG
